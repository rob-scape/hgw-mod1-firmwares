/*
Dual AD envelope for Mod1 module designed by HAGIWO, adapted by Rob Heel.

Two independent Attack–Decay envelopes with shared attack and release knobs.
Per-envelope random timing variation via Pot3 (A2): 
 • Fully CCW → no variation
 • Fully CW → max random deviation per trigger
Variations are stronger at shorter attack/release settings, lighter at longer ones.

Envelope 1 is also manually triggerable via push button.
LED indicates envelope 1 level.

Outputs are fast PWM (16-bit for ENV1/ENV2, 8-bit LED).
Designed for Eurorack/modular trigger input and CV envelope output.

--Pin assign---
POT1  A0  Attack time
POT2  A1  Release Time
POT3  A2  Variation amount

F1    D17 Trigger1 IN
F2    D9  envelope1 out

F3    D10 Trigger2 IN
F4    D11 envelope2 out
BUTTON    Trigger envelope1
LED       output envelope1
EEPROM    N/A

*/
#define TABLE_SIZE 1024
#define Brightness 160  //0 - 255

const static PROGMEM byte Curve[1024] = {
  255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 224, 223, 222, 221, 220, 219, 218, 217, 217, 216, 215, 214, 213, 212, 211, 211, 210, 209, 208, 207, 206, 206, 205, 204, 203, 202, 202, 201, 200, 199, 198, 198, 197, 196, 195, 194, 194, 193, 192, 191, 191, 190, 189, 188, 188, 187, 186, 185, 185, 184, 183, 182, 182, 181, 180, 179, 179, 178, 177, 177, 176, 175, 174, 174, 173, 172, 172, 171, 170, 170, 169, 168, 168, 167, 166, 166, 165, 164, 164, 163, 162, 162, 161, 160, 160, 159, 158, 158, 157, 157, 156, 155, 155, 154, 153, 153, 152, 152, 151, 150, 150, 149, 149, 148, 147, 147, 146, 146, 145, 144, 144, 143, 143, 142, 142, 141, 140, 140, 139, 139, 138, 138, 137, 136, 136, 135, 135, 134, 134, 133, 133, 132, 132, 131, 131, 130, 129, 129, 128, 128, 127, 127, 126, 126, 125, 125, 124, 124, 123, 123, 122, 122, 121, 121, 120, 120, 119, 119, 118, 118, 117, 117, 117, 116, 116, 115, 115, 114, 114, 113, 113, 112, 112, 111, 111, 111, 110, 110, 109, 109, 108, 108, 107, 107, 107, 106, 106, 105, 105, 104, 104, 104, 103, 103, 102, 102, 101, 101, 101, 100, 100, 99, 99, 99, 98, 98, 97, 97, 97, 96, 96, 95, 95, 95, 94, 94, 93, 93, 93, 92, 92, 92, 91, 91, 90, 90, 90, 89, 89, 89, 88, 88, 88, 87, 87, 86, 86, 86, 85, 85, 85, 84, 84, 84, 83, 83, 83, 82, 82, 82, 81, 81, 81, 80, 80, 80, 79, 79, 79, 78, 78, 78, 77, 77, 77, 76, 76, 76, 75, 75, 75, 74, 74, 74, 74, 73, 73, 73, 72, 72, 72, 71, 71, 71, 71, 70, 70, 70, 69, 69, 69, 69, 68, 68, 68, 67, 67, 67, 67, 66, 66, 66, 65, 65, 65, 65, 64, 64, 64, 64, 63, 63, 63, 62, 62, 62, 62, 61, 61, 61, 61, 60, 60, 60, 60, 59, 59, 59, 59, 58, 58, 58, 58, 57, 57, 57, 57, 56, 56, 56, 56, 56, 55, 55, 55, 55, 54, 54, 54, 54, 53, 53, 53, 53, 53, 52, 52, 52, 52, 51, 51, 51, 51, 51, 50, 50, 50, 50, 49, 49, 49, 49, 49, 48, 48, 48, 48, 48, 47, 47, 47, 47, 47, 46, 46, 46, 46, 46, 45, 45, 45, 45, 45, 44, 44, 44, 44, 44, 43, 43, 43, 43, 43, 43, 42, 42, 42, 42, 42, 41, 41, 41, 41, 41, 41, 40, 40, 40, 40, 40, 40, 39, 39, 39, 39, 39, 38, 38, 38, 38, 38, 38, 37, 37, 37, 37, 37, 37, 37, 36, 36, 36, 36, 36, 36, 35, 35, 35, 35, 35, 35, 34, 34, 34, 34, 34, 34, 34, 33, 33, 33, 33, 33, 33, 33, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 30, 29, 29, 29, 29, 29, 29, 29, 29, 28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 27, 27, 27, 27, 27, 27, 26, 26, 26, 26, 26, 26, 26, 26, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 24, 24, 24, 24, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

const static PROGMEM int PotAdjust[1024] = {
  0, 5, 10, 15, 20, 25, 30, 35, 39, 44, 49, 54, 59, 63, 68, 73, 77, 82, 87, 91, 96, 100, 105, 109, 114, 118, 123, 127, 132, 136, 140, 145, 149, 153, 158, 162, 166, 170, 174, 179, 183, 187, 191, 195, 199, 203, 207, 211, 215, 219, 223, 227, 231, 235, 239, 243, 246, 250, 254, 258, 262, 265, 269, 273, 276, 280, 284, 287, 291, 295, 298, 302, 305, 309, 312, 316, 319, 323, 326, 330, 333, 336, 340, 343, 347, 350, 353, 356, 360, 363, 366, 369, 373, 376, 379, 382, 385, 389, 392, 395, 398, 401, 404, 407, 410, 413, 416, 419, 422, 425, 428, 431, 434, 437, 440, 443, 445, 448, 451, 454, 457, 459, 462, 465, 468, 471, 473, 476, 479, 481, 484, 487, 489, 492, 495, 497, 500, 502, 505, 507, 510, 513, 515, 518, 520, 523, 525, 527, 530, 532, 535, 537, 540, 542, 544, 547, 549, 551, 554, 556, 558, 561, 563, 565, 568, 570, 572, 574, 576, 579, 581, 583, 585, 587, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 651, 653, 655, 657, 659, 661, 662, 664, 666, 668, 669, 671, 673, 675, 676, 678, 680, 682, 683, 685, 687, 688, 690, 692, 693, 695, 697, 698, 700, 701, 703, 705, 706, 708, 709, 711, 712, 714, 716, 717, 719, 720, 722, 723, 725, 726, 728, 729, 731, 732, 733, 735, 736, 738, 739, 741, 742, 743, 745, 746, 748, 749, 750, 752, 753, 754, 756, 757, 758, 760, 761, 762, 764, 765, 766, 767, 769, 770, 771, 773, 774, 775, 776, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 843, 844, 845, 846, 847, 848, 849, 850, 851, 851, 852, 853, 854, 855, 856, 857, 857, 858, 859, 860, 861, 862, 862, 863, 864, 865, 866, 867, 867, 868, 869, 870, 870, 871, 872, 873, 874, 874, 875, 876, 877, 877, 878, 879, 880, 880, 881, 882, 882, 883, 884, 885, 885, 886, 887, 887, 888, 889, 889, 890, 891, 892, 892, 893, 894, 894, 895, 895, 896, 897, 897, 898, 899, 899, 900, 901, 901, 902, 903, 903, 904, 904, 905, 906, 906, 907, 907, 908, 909, 909, 910, 910, 911, 912, 912, 913, 913, 914, 914, 915, 916, 916, 917, 917, 918, 918, 919, 919, 920, 920, 921, 921, 922, 923, 923, 924, 924, 925, 925, 926, 926, 927, 927, 928, 928, 929, 929, 930, 930, 931, 931, 932, 932, 933, 933, 933, 934, 934, 935, 935, 936, 936, 937, 937, 938, 938, 939, 939, 939, 940, 940, 941, 941, 942, 942, 942, 943, 943, 944, 944, 945, 945, 945, 946, 946, 947, 947, 947, 948, 948, 949, 949, 949, 950, 950, 951, 951, 951, 952, 952, 953, 953, 953, 954, 954, 954, 955, 955, 955, 956, 956, 957, 957, 957, 958, 958, 958, 959, 959, 959, 960, 960, 960, 961, 961, 961, 962, 962, 962, 963, 963, 963, 964, 964, 964, 965, 965, 965, 966, 966, 966, 967, 967, 967, 967, 968, 968, 968, 969, 969, 969, 970, 970, 970, 970, 971, 971, 971, 972, 972, 972, 972, 973, 973, 973, 974, 974, 974, 974, 975, 975, 975, 975, 976, 976, 976, 977, 977, 977, 977, 978, 978, 978, 978, 979, 979, 979, 979, 980, 980, 980, 980, 981, 981, 981, 981, 981, 982, 982, 982, 982, 983, 983, 983, 983, 984, 984, 984, 984, 984, 985, 985, 985, 985, 986, 986, 986, 986, 986, 987, 987, 987, 987, 987, 988, 988, 988, 988, 988, 989, 989, 989, 989, 989, 990, 990, 990, 990, 990, 991, 991, 991, 991, 991, 992, 992, 992, 992, 992, 993, 993, 993, 993, 993, 993, 994, 994, 994, 994, 994, 994, 995, 995, 995, 995, 995, 996, 996, 996, 996, 996, 996, 997, 997, 997, 997, 997, 997, 997, 998, 998, 998, 998, 998, 998, 999, 999, 999, 999, 999, 999, 999, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023
};



float waveIndex1 = 0, waveIndex2 = 0;
int outputValue1 = 0, outputValue2 = 0;
int lastout1 = 0, lastout2 = 0;
unsigned long previousMillis = 0, currentMillis = 0;
bool lastTrig1 = HIGH, lastTrig2 = HIGH;
int state1 = 0, state2 = 0;
bool EoC1 = 0, EoC2 = 0;
int EoCcount1 = 0, EoCcount2 = 0;
int atkTime = 0, relTime = 0;
int atkTime1 = 0, relTime1 = 0;
int atkTime2 = 0, relTime2 = 0;

int lastButton = HIGH;
int lastTrig1Pin = HIGH;

void setup() {
  Serial.begin(9600);
  pinMode(4, INPUT_PULLUP);  // button
  pinMode(17, INPUT);        // trigger1
  pinMode(10, INPUT);        // trigger2
  pinMode(3, OUTPUT);        // LED
  pinMode(9, OUTPUT);        // env1 out
  pinMode(11, OUTPUT);       // env2 out

  // Fast PWM setup
  TCCR2A = (1 << WGM21) | (1 << WGM20) | (1 << COM2B1);
  TCCR2B = (1 << CS20);
  TCCR1A = (1 << WGM11) | (1 << COM1A1);
  TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS10);
  ICR1 = 255;
}

void loop() {
  currentMillis = millis();

  // Read pots
  int pot1 = analogRead(A0);
  int pot2 = analogRead(A1);
  int variationPot = analogRead(A2);

  atkTime = 1024 - pgm_read_word(&PotAdjust[pot1]);
  relTime = 1024 - pgm_read_word(&PotAdjust[pot2]);

  // Normalized pot values
  float atkNorm = pot1 / 1023.0;
  float relNorm = pot2 / 1023.0;
  float varNorm = variationPot / 1023.0;

  // Scaled variation range (0.2 to 0.8)
  // To shift the range to 0.1–0.8, replace 0.6 + 0.2 with 0.7 + 0.1
  float atkVarScale = (1.0 - atkNorm) * 0.6 + 0.2;
  float relVarScale = (1.0 - relNorm) * 0.6 + 0.2;
  float atkVarAmount = varNorm * atkVarScale;
  float relVarAmount = varNorm * relVarScale;

  // Trigger reads with edge detection
  int buttonReading = digitalRead(4);
  int trig1Reading = digitalRead(17);
  int trig2Reading = digitalRead(10);

  bool triggerEnvelope1 = (lastButton == HIGH && buttonReading == LOW) ||
                          (lastTrig1Pin == HIGH && trig1Reading == LOW);
  bool triggerEnvelope2 = (lastTrig2 == HIGH && trig2Reading == LOW);

  lastButton = buttonReading;
  lastTrig1Pin = trig1Reading;
  lastTrig2 = trig2Reading;

  if (triggerEnvelope1) {
    lastout1 = (state1 == 2) ? outputValue1 : 0;
    state1 = 1;
    waveIndex1 = 0;
    atkTime1 = atkTime + random(-1000, 1000) / 1000.0 * atkTime * atkVarAmount;
    relTime1 = relTime + random(-1000, 1000) / 1000.0 * relTime * relVarAmount;
  }
  if (triggerEnvelope2) {
    lastout2 = (state2 == 2) ? outputValue2 : 0;
    state2 = 1;
    waveIndex2 = 0;
    atkTime2 = atkTime + random(-1000, 1000) / 1000.0 * atkTime * atkVarAmount;
    relTime2 = relTime + random(-1000, 1000) / 1000.0 * relTime * relVarAmount;
  }

  if (currentMillis - previousMillis >= 1) {
    previousMillis = currentMillis;

    // ENV 1
    if (state1 == 1) {
      outputValue1 = map(pgm_read_byte(&Curve[(int)waveIndex1]), 0, 255, 255, lastout1);
      waveIndex1 += 0.05 * atkTime1 / 2;
    } else if (state1 == 2) {
      outputValue1 = map(pgm_read_byte(&Curve[(int)waveIndex1 - TABLE_SIZE]), 0, 255, 0, 255);
      waveIndex1 += 0.05 * relTime1 / 2;
    }
    if (waveIndex1 > TABLE_SIZE && waveIndex1 < 2 * TABLE_SIZE) state1 = 2;
    if (waveIndex1 >= 2 * TABLE_SIZE) {
      waveIndex1 = 0;
      state1 = 0;
      EoC1 = 1;
    }
    if (EoC1) {
      if (++EoCcount1 > 10) {
        EoCcount1 = 0;
        EoC1 = 0;
      }
    }
    analogWrite(9, outputValue1);
    analogWrite(3, outputValue1 * Brightness / 255);

    // ENV 2
    if (state2 == 1) {
      outputValue2 = map(pgm_read_byte(&Curve[(int)waveIndex2]), 0, 255, 255, lastout2);
      waveIndex2 += 0.05 * atkTime2 / 2;
    } else if (state2 == 2) {
      outputValue2 = map(pgm_read_byte(&Curve[(int)waveIndex2 - TABLE_SIZE]), 0, 255, 0, 255);
      waveIndex2 += 0.05 * relTime2 / 2;
    }
    if (waveIndex2 > TABLE_SIZE && waveIndex2 < 2 * TABLE_SIZE) state2 = 2;
    if (waveIndex2 >= 2 * TABLE_SIZE) {
      waveIndex2 = 0;
      state2 = 0;
      EoC2 = 1;
    }
    if (EoC2) {
      if (++EoCcount2 > 10) {
        EoCcount2 = 0;
        EoC2 = 0;
      }
    }
    analogWrite(11, outputValue2);
  }
}
